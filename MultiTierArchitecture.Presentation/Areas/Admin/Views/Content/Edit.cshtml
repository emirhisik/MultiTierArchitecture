@model MultiTierArchitecture.Entities.Content

<h2>İçeriği Düzenle</h2>

<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label for="Title">Başlık</label>
        <input type="text" asp-for="Title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Description">İçerik</label>
        <textarea asp-for="Description" class="form-control" id="editor"></textarea>
    </div>
    <div class="form-group">
        <label for="Language">Dil</label>
        <textarea asp-for="Language" class="form-control"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Güncelle</button>
</form>

@section Scripts {
    <script>
    ClassicEditor
            .create(document.querySelector('#editor'), {
                ckfinder: {
                    // Görsel yükleme URL'si
                    uploadUrl: '/Admin/Content/UploadImage'
                }
            })
            .then(editor => {
                // Eğer kendi custom upload adapter'inizi tanımlamak istiyorsanız
                editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                    // Custom upload adapter döndürülüyor
                    return new MyCustomUploadAdapter(loader);
                };
            })
            .catch(error => {
                console.error(error);
            });
        class MyCustomUploadAdapter {
            constructor(loader) {
                // Görsel dosyasını yükleyici
                this.loader = loader;
                // Yükleme yapılacak sunucu URL'si
                this.url = '/Admin/Content/UploadImage';
            }

            // Yükleme işlemini başlatan fonksiyon
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Yükleme işlemi iptal edildiğinde çalışır
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Ajax isteğini başlatan fonksiyon
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                xhr.open('POST', this.url, true);
                xhr.responseType = 'json';
            }

            // Yükleme sırasında event listener ekleyen fonksiyon
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Görsel yükleme başarısız oldu: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // Başarılı yükleme sonrası CKEditor'e URL döndür
                    resolve({
                        default: response.url
                    });
                });

                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Görsel dosyasını sunucuya gönderen fonksiyon
            _sendRequest(file) {
                const data = new FormData();

                data.append('upload', file);

                this.xhr.send(data);
            }
        }</script>
}
